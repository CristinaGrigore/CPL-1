sequence(e) ::= "<e; separator=\"\n\">"
sequenceSpaced(e) ::= "<e; separator=\"\n\n\">"

program(consts, classNames, classObjs, protObjs, dispTables, methods) ::= <<
.data
    .align  2
    .globl  class_nameTab
    .globl  Int_protObj
    .globl  String_protObj
    .globl  bool_const_false
    .globl  bool_const_true
    .globl  Main_protObj
    .globl  _int_tag
    .globl  _string_tag
    .globl  _bool_tag

_int_tag:
    .word   1
_string_tag:
    .word   3
_bool_tag:
    .word   2

bool_const_false:
    .word   4
    .word   4
    .word   Bool_dispTab
    .word   0
bool_const_true:
    .word   4
    .word   4
    .word   Bool_dispTab
    .word   1
<consts>

class_nameTab:
<classNames>

class_objTab:
<classObjs>

<protObjs>

<dispTables>

heap_start:
    .word   0

.text
    .globl  Int_init
    .globl  String_init
    .globl  Bool_init
    .globl  Main_init
    .globl  Main.main

<methods>
>>

initMethod(class, parent, attrib) ::= <<
<class>_init:
	addiu   $sp $sp -12
	sw      $fp 12($sp)
	sw      $s0 8($sp)
	sw      $ra 4($sp)
	addiu   $fp $sp 4
	move    $s0 $a0
<if (parent)>
	jal     <parent>_init
<endif>
<if (attrib)>
<attributes>
<endif>
	move    $a0 $s0
	lw      $fp 12($sp)
	lw      $s0 8($sp)
	lw      $ra 4($sp)
	addiu   $sp $sp 12
	jr      $ra
>>

objTabEntry(class) ::= <<
	.word   <class>_protObj
	.word   <class>_init
>>

protObj(class, tag, words, attrib) ::= <<
<class>_protObj:
    .word   <tag>
    .word   <words>
    .word   <class>_dispTab
<attrib>
>>

dispTableEntry(method) ::= <<
	.word   <method>
>>

dispatchTable(class, methods) ::= <<
<class>_dispTab:
<methods>
>>

intConst(val) ::= <<
int_const_<val>:
	.word   2
	.word   4
	.word   Int_dispTab
	.word   <val>
>>

stringConst(str, len, wordCount) ::= <<
str_const_<str>:
	.word	3
	.word	<wordCount>
	.word	String_dispTab
	.word	<len>
	.asciiz	"<str>"
	.align	2
>>

method(class, name, body) ::= <<
<class>.<name>:
	addiu   $sp $sp -12
	sw      $fp 12($sp)
	sw      $s0 8($sp)
	sw      $ra 4($sp)
	addiu   $fp $sp 4
	move    $s0 $a0
<body>
	lw      $fp 12($sp)
	lw      $s0 8($sp)
	lw      $ra 4($sp)
	addiu   $sp $sp 12
	jr      $ra
>>

literal(addr) ::= <<
	la		$a0 <addr>
>>

// TODO: dispatch explicit + cu @
dispatch(method, idx, filename, line, offset)  ::= <<
	move    $a0 $s0
	bnez    $a0 dispatch_<method>_<idx>
	la      $a0 <filename>
	li      $t1 <line>
	jal     _dispatch_abort
dispatch_<method>_<idx>:
	lw      $t1 8($a0)
    lw      $t1 <offset>($t1)
    jalr    $t1
>>
